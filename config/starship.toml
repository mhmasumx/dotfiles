# don't print a new line at the start of the prompt
add_newline = false

# format = "$directory$git_branch$git_status${custom.git_host}$fill${custom.git_email}$nodejs$python$java\n$character"
format = "$directory$shell$fill${custom.git_email}$nodejs$python$java\n$character"
right_format = "$status$cmd_duration"

[fill]
style = "bright-blue"
symbol = " "
#format = "[$symbol]($style)"

[status]
disabled = false
style = "red"
format = " [$symbol $common_meaning$signal_name$maybe_int]($style)"
map_symbol = true

[shell]
fish_indicator = '󰈺 '
zsh_indicator = '(zsh)'
powershell_indicator = '_'
unknown_indicator = 'mystery shell'
style = 'cyan bold'
format = "[($zsh_indicator)]($style)"
disabled = false

[directory]
style = "bright-green"
read_only = ""
read_only_style = "bright-red"
truncation_length = 4
truncate_to_repo = true
format = "[\ue5ff $path ]($style)([$read_only]($read_only_style))"

[directory.substitutions]
"Documents" = "󰈙 "
"Downloads" = " "
"Music" = " "
"Pictures" = " "
"~/Sites" = "@Sites"
"~/Desktop" = "@Desktop"

[nodejs]
symbol = " "
style = "#66cc33"
format = " \ue621 [$symbol$version]($style)"

[python]
style = "#66cc33"
format = " \ue621 [$symbol$version[$virtualenv](bold italic #75AADB)]($style)"

[java]
style = "#ce412b"
format = " \ue621 [$symbol$version]($style)"

[cmd_duration]
format = " [$duration]($style)"
min_time = 500

# ------ Git ------
[git_branch]
symbol = " "
style = "#e35938"
format = "\ue621[ $symbol$branch ]($style)"

[git_status]
disabled = false
format = '([$all_status]($style))'
conflicted = "([⚠️ ${count}](bold red) )"
ahead = "([⟫${count}])"
behind = "([⟪${count}])"
stashed = "([↪ ${count}](red)) "
modified = "([ ${count}](yellow) )"
staged = "([ ${count}](green) )"
renamed = "([⇆ ${count}](blue) )"
deleted = "([ ${count}](red) )"
untracked ="([ ${count}](dimmed red) )"
[custom.git_email]
symbol = " "
style = "#E0AF68"
command = "git config user.email"
when = "git rev-parse --git-dir 2> /dev/null"
format = "[ $symbol[$output](italic $style)]($style)"

[custom.git_host]
when = 'git rev-parse --is-inside-work-tree 2> /dev/null'
command = """
GIT_REMOTE=$(command git ls-remote --get-url 2> /dev/null)
read -ra GIT_HOST <<< "$GIT_REMOTE"

if [[ "$GIT_REMOTE" =~ "github" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "gitlab" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "bitbucket|stash" ]]; then
    GIT_REMOTE_SYMBOL="\\e[38;5;26m\uf5a7\\e[0m"
elif [[ "$GIT_REMOTE" =~ "git" ]]; then
    GIT_REMOTE_SYMBOL=" "
else
    GIT_REMOTE_SYMBOL=""
fi
echo "$GIT_REMOTE_SYMBOL${GIT_HOST[2]}"
"""
format = "([at](italic) $output )"
